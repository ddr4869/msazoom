// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/msazoom/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// BoardID applies equality check predicate on the "board_id" field. It's identical to BoardIDEQ.
func BoardID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBoardID, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessage, v))
}

// Writer applies equality check predicate on the "writer" field. It's identical to WriterEQ.
func Writer(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldWriter, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// BoardIDEQ applies the EQ predicate on the "board_id" field.
func BoardIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBoardID, v))
}

// BoardIDNEQ applies the NEQ predicate on the "board_id" field.
func BoardIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldBoardID, v))
}

// BoardIDIn applies the In predicate on the "board_id" field.
func BoardIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldBoardID, vs...))
}

// BoardIDNotIn applies the NotIn predicate on the "board_id" field.
func BoardIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldBoardID, vs...))
}

// BoardIDGT applies the GT predicate on the "board_id" field.
func BoardIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldBoardID, v))
}

// BoardIDGTE applies the GTE predicate on the "board_id" field.
func BoardIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldBoardID, v))
}

// BoardIDLT applies the LT predicate on the "board_id" field.
func BoardIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldBoardID, v))
}

// BoardIDLTE applies the LTE predicate on the "board_id" field.
func BoardIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldBoardID, v))
}

// BoardIDContains applies the Contains predicate on the "board_id" field.
func BoardIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldBoardID, v))
}

// BoardIDHasPrefix applies the HasPrefix predicate on the "board_id" field.
func BoardIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldBoardID, v))
}

// BoardIDHasSuffix applies the HasSuffix predicate on the "board_id" field.
func BoardIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldBoardID, v))
}

// BoardIDEqualFold applies the EqualFold predicate on the "board_id" field.
func BoardIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldBoardID, v))
}

// BoardIDContainsFold applies the ContainsFold predicate on the "board_id" field.
func BoardIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldBoardID, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMessage, v))
}

// WriterEQ applies the EQ predicate on the "writer" field.
func WriterEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldWriter, v))
}

// WriterNEQ applies the NEQ predicate on the "writer" field.
func WriterNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldWriter, v))
}

// WriterIn applies the In predicate on the "writer" field.
func WriterIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldWriter, vs...))
}

// WriterNotIn applies the NotIn predicate on the "writer" field.
func WriterNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldWriter, vs...))
}

// WriterGT applies the GT predicate on the "writer" field.
func WriterGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldWriter, v))
}

// WriterGTE applies the GTE predicate on the "writer" field.
func WriterGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldWriter, v))
}

// WriterLT applies the LT predicate on the "writer" field.
func WriterLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldWriter, v))
}

// WriterLTE applies the LTE predicate on the "writer" field.
func WriterLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldWriter, v))
}

// WriterContains applies the Contains predicate on the "writer" field.
func WriterContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldWriter, v))
}

// WriterHasPrefix applies the HasPrefix predicate on the "writer" field.
func WriterHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldWriter, v))
}

// WriterHasSuffix applies the HasSuffix predicate on the "writer" field.
func WriterHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldWriter, v))
}

// WriterEqualFold applies the EqualFold predicate on the "writer" field.
func WriterEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldWriter, v))
}

// WriterContainsFold applies the ContainsFold predicate on the "writer" field.
func WriterContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldWriter, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
