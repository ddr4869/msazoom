// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ddr4869/msazoom/ent/hotboard"
	"github.com/ddr4869/msazoom/ent/predicate"
)

// HotBoardUpdate is the builder for updating HotBoard entities.
type HotBoardUpdate struct {
	config
	hooks    []Hook
	mutation *HotBoardMutation
}

// Where appends a list predicates to the HotBoardUpdate builder.
func (hbu *HotBoardUpdate) Where(ps ...predicate.HotBoard) *HotBoardUpdate {
	hbu.mutation.Where(ps...)
	return hbu
}

// Mutation returns the HotBoardMutation object of the builder.
func (hbu *HotBoardUpdate) Mutation() *HotBoardMutation {
	return hbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hbu *HotBoardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hbu.sqlSave, hbu.mutation, hbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hbu *HotBoardUpdate) SaveX(ctx context.Context) int {
	affected, err := hbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hbu *HotBoardUpdate) Exec(ctx context.Context) error {
	_, err := hbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbu *HotBoardUpdate) ExecX(ctx context.Context) {
	if err := hbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hbu *HotBoardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hotboard.Table, hotboard.Columns, sqlgraph.NewFieldSpec(hotboard.FieldID, field.TypeInt))
	if ps := hbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hotboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hbu.mutation.done = true
	return n, nil
}

// HotBoardUpdateOne is the builder for updating a single HotBoard entity.
type HotBoardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HotBoardMutation
}

// Mutation returns the HotBoardMutation object of the builder.
func (hbuo *HotBoardUpdateOne) Mutation() *HotBoardMutation {
	return hbuo.mutation
}

// Where appends a list predicates to the HotBoardUpdate builder.
func (hbuo *HotBoardUpdateOne) Where(ps ...predicate.HotBoard) *HotBoardUpdateOne {
	hbuo.mutation.Where(ps...)
	return hbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hbuo *HotBoardUpdateOne) Select(field string, fields ...string) *HotBoardUpdateOne {
	hbuo.fields = append([]string{field}, fields...)
	return hbuo
}

// Save executes the query and returns the updated HotBoard entity.
func (hbuo *HotBoardUpdateOne) Save(ctx context.Context) (*HotBoard, error) {
	return withHooks(ctx, hbuo.sqlSave, hbuo.mutation, hbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hbuo *HotBoardUpdateOne) SaveX(ctx context.Context) *HotBoard {
	node, err := hbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hbuo *HotBoardUpdateOne) Exec(ctx context.Context) error {
	_, err := hbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbuo *HotBoardUpdateOne) ExecX(ctx context.Context) {
	if err := hbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hbuo *HotBoardUpdateOne) sqlSave(ctx context.Context) (_node *HotBoard, err error) {
	_spec := sqlgraph.NewUpdateSpec(hotboard.Table, hotboard.Columns, sqlgraph.NewFieldSpec(hotboard.FieldID, field.TypeInt))
	id, ok := hbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HotBoard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hotboard.FieldID)
		for _, f := range fields {
			if !hotboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hotboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &HotBoard{config: hbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hotboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hbuo.mutation.done = true
	return _node, nil
}
