// Code generated by ent, DO NOT EDIT.

package board

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/msazoom/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldID, id))
}

// BoardName applies equality check predicate on the "board_name" field. It's identical to BoardNameEQ.
func BoardName(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardName, v))
}

// BoardAdmin applies equality check predicate on the "board_admin" field. It's identical to BoardAdminEQ.
func BoardAdmin(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardAdmin, v))
}

// BoardPassword applies equality check predicate on the "board_password" field. It's identical to BoardPasswordEQ.
func BoardPassword(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardPassword, v))
}

// BoardStar applies equality check predicate on the "board_star" field. It's identical to BoardStarEQ.
func BoardStar(v int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardStar, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldUpdatedAt, v))
}

// BoardNameEQ applies the EQ predicate on the "board_name" field.
func BoardNameEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardName, v))
}

// BoardNameNEQ applies the NEQ predicate on the "board_name" field.
func BoardNameNEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldBoardName, v))
}

// BoardNameIn applies the In predicate on the "board_name" field.
func BoardNameIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldBoardName, vs...))
}

// BoardNameNotIn applies the NotIn predicate on the "board_name" field.
func BoardNameNotIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldBoardName, vs...))
}

// BoardNameGT applies the GT predicate on the "board_name" field.
func BoardNameGT(v string) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldBoardName, v))
}

// BoardNameGTE applies the GTE predicate on the "board_name" field.
func BoardNameGTE(v string) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldBoardName, v))
}

// BoardNameLT applies the LT predicate on the "board_name" field.
func BoardNameLT(v string) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldBoardName, v))
}

// BoardNameLTE applies the LTE predicate on the "board_name" field.
func BoardNameLTE(v string) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldBoardName, v))
}

// BoardNameContains applies the Contains predicate on the "board_name" field.
func BoardNameContains(v string) predicate.Board {
	return predicate.Board(sql.FieldContains(FieldBoardName, v))
}

// BoardNameHasPrefix applies the HasPrefix predicate on the "board_name" field.
func BoardNameHasPrefix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasPrefix(FieldBoardName, v))
}

// BoardNameHasSuffix applies the HasSuffix predicate on the "board_name" field.
func BoardNameHasSuffix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasSuffix(FieldBoardName, v))
}

// BoardNameEqualFold applies the EqualFold predicate on the "board_name" field.
func BoardNameEqualFold(v string) predicate.Board {
	return predicate.Board(sql.FieldEqualFold(FieldBoardName, v))
}

// BoardNameContainsFold applies the ContainsFold predicate on the "board_name" field.
func BoardNameContainsFold(v string) predicate.Board {
	return predicate.Board(sql.FieldContainsFold(FieldBoardName, v))
}

// BoardAdminEQ applies the EQ predicate on the "board_admin" field.
func BoardAdminEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardAdmin, v))
}

// BoardAdminNEQ applies the NEQ predicate on the "board_admin" field.
func BoardAdminNEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldBoardAdmin, v))
}

// BoardAdminIn applies the In predicate on the "board_admin" field.
func BoardAdminIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldBoardAdmin, vs...))
}

// BoardAdminNotIn applies the NotIn predicate on the "board_admin" field.
func BoardAdminNotIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldBoardAdmin, vs...))
}

// BoardAdminGT applies the GT predicate on the "board_admin" field.
func BoardAdminGT(v string) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldBoardAdmin, v))
}

// BoardAdminGTE applies the GTE predicate on the "board_admin" field.
func BoardAdminGTE(v string) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldBoardAdmin, v))
}

// BoardAdminLT applies the LT predicate on the "board_admin" field.
func BoardAdminLT(v string) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldBoardAdmin, v))
}

// BoardAdminLTE applies the LTE predicate on the "board_admin" field.
func BoardAdminLTE(v string) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldBoardAdmin, v))
}

// BoardAdminContains applies the Contains predicate on the "board_admin" field.
func BoardAdminContains(v string) predicate.Board {
	return predicate.Board(sql.FieldContains(FieldBoardAdmin, v))
}

// BoardAdminHasPrefix applies the HasPrefix predicate on the "board_admin" field.
func BoardAdminHasPrefix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasPrefix(FieldBoardAdmin, v))
}

// BoardAdminHasSuffix applies the HasSuffix predicate on the "board_admin" field.
func BoardAdminHasSuffix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasSuffix(FieldBoardAdmin, v))
}

// BoardAdminEqualFold applies the EqualFold predicate on the "board_admin" field.
func BoardAdminEqualFold(v string) predicate.Board {
	return predicate.Board(sql.FieldEqualFold(FieldBoardAdmin, v))
}

// BoardAdminContainsFold applies the ContainsFold predicate on the "board_admin" field.
func BoardAdminContainsFold(v string) predicate.Board {
	return predicate.Board(sql.FieldContainsFold(FieldBoardAdmin, v))
}

// BoardPasswordEQ applies the EQ predicate on the "board_password" field.
func BoardPasswordEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardPassword, v))
}

// BoardPasswordNEQ applies the NEQ predicate on the "board_password" field.
func BoardPasswordNEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldBoardPassword, v))
}

// BoardPasswordIn applies the In predicate on the "board_password" field.
func BoardPasswordIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldBoardPassword, vs...))
}

// BoardPasswordNotIn applies the NotIn predicate on the "board_password" field.
func BoardPasswordNotIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldBoardPassword, vs...))
}

// BoardPasswordGT applies the GT predicate on the "board_password" field.
func BoardPasswordGT(v string) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldBoardPassword, v))
}

// BoardPasswordGTE applies the GTE predicate on the "board_password" field.
func BoardPasswordGTE(v string) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldBoardPassword, v))
}

// BoardPasswordLT applies the LT predicate on the "board_password" field.
func BoardPasswordLT(v string) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldBoardPassword, v))
}

// BoardPasswordLTE applies the LTE predicate on the "board_password" field.
func BoardPasswordLTE(v string) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldBoardPassword, v))
}

// BoardPasswordContains applies the Contains predicate on the "board_password" field.
func BoardPasswordContains(v string) predicate.Board {
	return predicate.Board(sql.FieldContains(FieldBoardPassword, v))
}

// BoardPasswordHasPrefix applies the HasPrefix predicate on the "board_password" field.
func BoardPasswordHasPrefix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasPrefix(FieldBoardPassword, v))
}

// BoardPasswordHasSuffix applies the HasSuffix predicate on the "board_password" field.
func BoardPasswordHasSuffix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasSuffix(FieldBoardPassword, v))
}

// BoardPasswordEqualFold applies the EqualFold predicate on the "board_password" field.
func BoardPasswordEqualFold(v string) predicate.Board {
	return predicate.Board(sql.FieldEqualFold(FieldBoardPassword, v))
}

// BoardPasswordContainsFold applies the ContainsFold predicate on the "board_password" field.
func BoardPasswordContainsFold(v string) predicate.Board {
	return predicate.Board(sql.FieldContainsFold(FieldBoardPassword, v))
}

// BoardStarEQ applies the EQ predicate on the "board_star" field.
func BoardStarEQ(v int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldBoardStar, v))
}

// BoardStarNEQ applies the NEQ predicate on the "board_star" field.
func BoardStarNEQ(v int) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldBoardStar, v))
}

// BoardStarIn applies the In predicate on the "board_star" field.
func BoardStarIn(vs ...int) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldBoardStar, vs...))
}

// BoardStarNotIn applies the NotIn predicate on the "board_star" field.
func BoardStarNotIn(vs ...int) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldBoardStar, vs...))
}

// BoardStarGT applies the GT predicate on the "board_star" field.
func BoardStarGT(v int) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldBoardStar, v))
}

// BoardStarGTE applies the GTE predicate on the "board_star" field.
func BoardStarGTE(v int) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldBoardStar, v))
}

// BoardStarLT applies the LT predicate on the "board_star" field.
func BoardStarLT(v int) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldBoardStar, v))
}

// BoardStarLTE applies the LTE predicate on the "board_star" field.
func BoardStarLTE(v int) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldBoardStar, v))
}

// BoardStarIsNil applies the IsNil predicate on the "board_star" field.
func BoardStarIsNil() predicate.Board {
	return predicate.Board(sql.FieldIsNull(FieldBoardStar))
}

// BoardStarNotNil applies the NotNil predicate on the "board_star" field.
func BoardStarNotNil() predicate.Board {
	return predicate.Board(sql.FieldNotNull(FieldBoardStar))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Board) predicate.Board {
	return predicate.Board(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Board) predicate.Board {
	return predicate.Board(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Board) predicate.Board {
	return predicate.Board(sql.NotPredicates(p))
}
