// Code generated by ent, DO NOT EDIT.

package chat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/msazoom/chat-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldID, id))
}

// ChatName applies equality check predicate on the "chat_name" field. It's identical to ChatNameEQ.
func ChatName(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldChatName, v))
}

// ChatUser applies equality check predicate on the "chat_user" field. It's identical to ChatUserEQ.
func ChatUser(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldChatUser, v))
}

// ChatPassword applies equality check predicate on the "chat_password" field. It's identical to ChatPasswordEQ.
func ChatPassword(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldChatPassword, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChatNameEQ applies the EQ predicate on the "chat_name" field.
func ChatNameEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldChatName, v))
}

// ChatNameNEQ applies the NEQ predicate on the "chat_name" field.
func ChatNameNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldChatName, v))
}

// ChatNameIn applies the In predicate on the "chat_name" field.
func ChatNameIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldChatName, vs...))
}

// ChatNameNotIn applies the NotIn predicate on the "chat_name" field.
func ChatNameNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldChatName, vs...))
}

// ChatNameGT applies the GT predicate on the "chat_name" field.
func ChatNameGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldChatName, v))
}

// ChatNameGTE applies the GTE predicate on the "chat_name" field.
func ChatNameGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldChatName, v))
}

// ChatNameLT applies the LT predicate on the "chat_name" field.
func ChatNameLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldChatName, v))
}

// ChatNameLTE applies the LTE predicate on the "chat_name" field.
func ChatNameLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldChatName, v))
}

// ChatNameContains applies the Contains predicate on the "chat_name" field.
func ChatNameContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldChatName, v))
}

// ChatNameHasPrefix applies the HasPrefix predicate on the "chat_name" field.
func ChatNameHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldChatName, v))
}

// ChatNameHasSuffix applies the HasSuffix predicate on the "chat_name" field.
func ChatNameHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldChatName, v))
}

// ChatNameEqualFold applies the EqualFold predicate on the "chat_name" field.
func ChatNameEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldChatName, v))
}

// ChatNameContainsFold applies the ContainsFold predicate on the "chat_name" field.
func ChatNameContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldChatName, v))
}

// ChatUserEQ applies the EQ predicate on the "chat_user" field.
func ChatUserEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldChatUser, v))
}

// ChatUserNEQ applies the NEQ predicate on the "chat_user" field.
func ChatUserNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldChatUser, v))
}

// ChatUserIn applies the In predicate on the "chat_user" field.
func ChatUserIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldChatUser, vs...))
}

// ChatUserNotIn applies the NotIn predicate on the "chat_user" field.
func ChatUserNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldChatUser, vs...))
}

// ChatUserGT applies the GT predicate on the "chat_user" field.
func ChatUserGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldChatUser, v))
}

// ChatUserGTE applies the GTE predicate on the "chat_user" field.
func ChatUserGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldChatUser, v))
}

// ChatUserLT applies the LT predicate on the "chat_user" field.
func ChatUserLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldChatUser, v))
}

// ChatUserLTE applies the LTE predicate on the "chat_user" field.
func ChatUserLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldChatUser, v))
}

// ChatUserContains applies the Contains predicate on the "chat_user" field.
func ChatUserContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldChatUser, v))
}

// ChatUserHasPrefix applies the HasPrefix predicate on the "chat_user" field.
func ChatUserHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldChatUser, v))
}

// ChatUserHasSuffix applies the HasSuffix predicate on the "chat_user" field.
func ChatUserHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldChatUser, v))
}

// ChatUserEqualFold applies the EqualFold predicate on the "chat_user" field.
func ChatUserEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldChatUser, v))
}

// ChatUserContainsFold applies the ContainsFold predicate on the "chat_user" field.
func ChatUserContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldChatUser, v))
}

// ChatPasswordEQ applies the EQ predicate on the "chat_password" field.
func ChatPasswordEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldChatPassword, v))
}

// ChatPasswordNEQ applies the NEQ predicate on the "chat_password" field.
func ChatPasswordNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldChatPassword, v))
}

// ChatPasswordIn applies the In predicate on the "chat_password" field.
func ChatPasswordIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldChatPassword, vs...))
}

// ChatPasswordNotIn applies the NotIn predicate on the "chat_password" field.
func ChatPasswordNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldChatPassword, vs...))
}

// ChatPasswordGT applies the GT predicate on the "chat_password" field.
func ChatPasswordGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldChatPassword, v))
}

// ChatPasswordGTE applies the GTE predicate on the "chat_password" field.
func ChatPasswordGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldChatPassword, v))
}

// ChatPasswordLT applies the LT predicate on the "chat_password" field.
func ChatPasswordLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldChatPassword, v))
}

// ChatPasswordLTE applies the LTE predicate on the "chat_password" field.
func ChatPasswordLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldChatPassword, v))
}

// ChatPasswordContains applies the Contains predicate on the "chat_password" field.
func ChatPasswordContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldChatPassword, v))
}

// ChatPasswordHasPrefix applies the HasPrefix predicate on the "chat_password" field.
func ChatPasswordHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldChatPassword, v))
}

// ChatPasswordHasSuffix applies the HasSuffix predicate on the "chat_password" field.
func ChatPasswordHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldChatPassword, v))
}

// ChatPasswordIsNil applies the IsNil predicate on the "chat_password" field.
func ChatPasswordIsNil() predicate.Chat {
	return predicate.Chat(sql.FieldIsNull(FieldChatPassword))
}

// ChatPasswordNotNil applies the NotNil predicate on the "chat_password" field.
func ChatPasswordNotNil() predicate.Chat {
	return predicate.Chat(sql.FieldNotNull(FieldChatPassword))
}

// ChatPasswordEqualFold applies the EqualFold predicate on the "chat_password" field.
func ChatPasswordEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldChatPassword, v))
}

// ChatPasswordContainsFold applies the ContainsFold predicate on the "chat_password" field.
func ChatPasswordContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldChatPassword, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chat) predicate.Chat {
	return predicate.Chat(sql.NotPredicates(p))
}
